name: CICD PIPELINE

on:
  push:
    branches: [ "main" ]


jobs:
  compile:
    runs-on: banjo-host

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn compile

  security-check:
    runs-on: banjo-host
    needs: compile

    steps:
    - uses: actions/checkout@v4
    - name: Trivy Installation
      run: |
        sudo apt-get install -y wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update -y
        sudo apt-get install -y trivy
         
    - name: Trivy FS Scan
      run: trivy fs --format table -o report.json .
      
    - name: Gitleaks Installation
      run: |
        GITLEAKS_VERSION=$(curl -s "https://api.github.com/repos/gitleaks/gitleaks/releases/latest" | grep -Po '"tag_name": "v\K[0-9.]+')
        wget -qO gitleaks.tar.gz https://github.com/gitleaks/gitleaks/releases/latest/download/gitleaks_${GITLEAKS_VERSION}_linux_x64.tar.gz
        sudo tar xf gitleaks.tar.gz -C /usr/local/bin gitleaks
        rm -rf gitleaks.tar.gz

    - name: Gitleaks Code Scan
      run: gitleaks detect source . -r gitleaks-report.json -f json
      
  test:
    needs: security-check
    runs-on: banjo-host

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Unit test Cases
      run: mvn test
      
  build_Project_Sonar_scan:
    needs: test
    runs-on: banjo-host

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build project
      run: mvn package
    
    - name: Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: app-jar
        path: target/*.jar 
      
    - uses: actions/checkout@v4
      with:
        # Disabling the shallow clones is recommended for improving the relevancy of reporting
        fetch-depth: 0
    
    - name: Install unzip
      run: sudo apt install unzip -y
      
    - name: SonarQube Scan
      uses: sonarsource/sonarqube-scan-action@master #Ex: v4.1.0, See the latest version at https://github.com/marketplace/actions/official-sonarqube-scan
      env:
        SONAR_TOKEN: ${{ secrets.MY_SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ vars.MY_SONAR_HOST_URL }}

    #Check the Quality Gate status.
    # - name: SonarQube Quality Gate check
    #   id: sonarqube-quality-gate-check
    #   uses: sonarsource/sonarqube-quality-gate-action@master #Quality GATE
    #   with:
    #       pollingTimeoutSec: 600
    #   env:
    #       SONAR_TOKEN: ${{ secrets.MY_SONAR_TOKEN }}
    #       SONAR_HOST_URL: ${{ vars.MY_SONAR_HOST_URL }} #OPTIONAL
    
  build_docker_image_and_push:
    runs-on: banjo-host
    needs: build_Project_Sonar_scan
    steps:
    - uses: actions/checkout@v4
    - name: Download JAR artifact
      uses: actions/download-artifact@v4
      with:
        name: app-jar
        path: app  # this will download JAR to ./app folder.
        
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ vars.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Build and Push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        tags: bjrules/bankapp:latest #Docker image and label
        file: ./Dockerfile
        
  deploy_to_kubernetes:
    runs-on: banjo-host
    needs: build_docker_image_and_push
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    - name: Install AWS CLI
      run: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: latest
    - name: Configure kubeconfig
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.EKS_KUBECONFIG }}" > $HOME/.kube/config
    - name: Deploy to EKS
      run: |
        kubectl apply -f ds.yml

    
    # # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
    # - name: Update dependency graph
    #   uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6
